[{"title":"mac下安装nginx --- 前端知识篇","url":"%2F2018%2F10%2F19%2Fmac%20%E4%B8%8B%E5%AE%89%E8%A3%85nginx%20---%20%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%AF%87%2F","content":"\n## 初识nginx\n相信大多数同学已经听说了nginx这个东东，会不会很多同学和我一样一开始接触nginx的时候不知道它是什么？它能干什么？如果需要启服务，完全可以用node，为什么还需要使用nginx？\n\n对以上问题，我先引用一下官方对nginx的介绍\n\n> \"Nginx是一款轻量级的HTTP服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的IO性能，时常用于服务端的反向代理和负载均衡。\"\n\n## nginx的应用场景\n\n 1. **http服务器**。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。\n 2. **虚拟主机**。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。\n 3. **反向代理，负载均衡**。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。\n\n## nginx的优点\nnginx的优点在应用场景中已有体现，比如上面提到的反向代理，负载均衡功能。除此之外还有以下优势\n\n- **支持海量高并发**：采用IO多路复用epoll。官方测试Nginx能够支持5万并发链接，实际生产环境中可以支撑2-4万并发连接数。\n- **内存消耗少**：在主流的服务器中Nginx目前是内存消耗最小的。\n- **配置文件简单**：网络和程序配置通俗易懂，即使非专业运维也能看懂。\n- **支持热部署**：这对于我们前端的同学来说，使用惯webpack的热更新，对热更新的支持，无疑是吸引了一大波同学（我就算其中一个，啊哈哈）\n\n![](/img/nginx-c.jpg)\n\n## 安装nginx\n前面铺垫了这么多，现在终于进入主题了。本教程是使用homebrew进行安装，未安装brew的同学请自行安装\n\n\tbrew install nginx\n\n![](/img/nginx-install.png)\n## Nginx配置文件地址\n安装成功后需要对配置文件进行个性化定制，本教程提供大部分时间需要修改的配置，配置文件在如下地址处\n\n*/usr/local/etc/nginx/nginx.conf*\n\n## 默认的网站根目录\n是否想知道网址访问的哪份文件呢？来，我们一起打开它\n\n*/usr/local/var/www/*\n\n## 启动重启关闭nginx\n成功安装后，我们肯定就是来使用nginx了，你可使用\n\n\tnginx \n\t\n**直接启动**或者使用\n\n\tnginx -s reload|reopen|stop|quit \n\n**重新加载配置|重启|快速停止|安全关闭**\n\n启动成功后，我们就只需要在浏览器中访问服务（地址）就好了\n\n*http://localhost:8080*\n\n![](/img/nginx-open.png)\n\n## 修改其他端口访问地址配置\n默认8080被占用了？或者你看8080端口不爽？来，我们一起灭了它\n\n![](/img/nginx-port.png)\n\n## 修改默认的网站根目录\n修改完8080，你是否觉得用默认的网站根目录很难找？是不是想换成自己熟悉的目录呢？\n\n![](/img/nginx-path.png)\n\n> tips: 配置文件里`location /` 里面的`root`,将`yourname`换成你电脑的用户名\n\n## 报错Permission问题\n这种问题都是没有权限引起的，执行代码前加上sudo即可\n\n![](/img/nginx-permission.png)\n\n## 403 Forbidden或者File not find\n修改了默认的网站根目录，出现问题时避免不了的。但是怎么办呢？这种问题一般是没有找到对应的文件，要不就是权限的问题\n\n1. 查看目录下是否存在`index.html`或者`index.htm`\n\n2. 修改配置文件第一行为 `user root owner;` 然后重启\n\n## 卸载nginx\n好了，最后，如果你还是觉得nginx用起来不爽，更喜欢node，Apache什么的，勇敢的卸载它吧\n\n\tbrew uninstall nginx\n"},{"title":"hexo","url":"%2F2018%2F07%2F28%2Fhexo%2F","content":"\n### 安装hexo \n\n\tnpm install -g hexo-cli\n\n### 初始化项目 \n\n\thexo init <folder>\n\tcd <folder>\n\tnpm install``\n\n### 启动项目 \n\thexo server\n\n### 更换主题 \n选择喜欢的[主题](https://hexo.io/themes/)并根据选择的主题进行更换，并将_config.yml中的theme主题替换成在文件夹theme中的文件名称, 添加主题中需要的图片等素材\n\n### hexo快捷命令及快速发布\n\thexo clean 清理静态化内容\n\thexo generate 简化 hexo g\n\thexo deploy 简化 hexo d"},{"title":"Hello World","url":"%2F2018%2F07%2F28%2Fhello-world%2F","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"},{"title":"linux下安装配置实现无密操作git","url":"%2F2018%2F07%2F24%2Flinux%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%AF%86%E6%93%8D%E4%BD%9Cgit%2F","content":"\n### linux服务端配置\n\n**linux安装git**\n\n\tyum install -y git\n\n**创建用户git**\n\n\tgroupadd git\n\tadduser git -g git\n\t\n**配置linux权限问题及创建authorized_keys文件**\n\n\tcd /home/git\n\tmkdir .ssh\n\tchmod 700 .ssh\n\ttouch .ssh/authorized_keys\n\tchmod 600 .ssh/authorized_keys\n\tcd /home\n\tchown -R git:git git\n\n\tTips:后续的git clone如果需要密码，很有可能是git用户没有访问authorized_keys文件的权限\n\n**创建git仓库文件夹**\n\n\tcd /home\n\tmkdir gitTest\n\tchown git:git gitTest //赋予git用户权限\n\n**初始化git仓库**\n\n\tcd gitTest\n\tgit init --bare gitTest.git\n\n**把仓库所属用户改为git**\n\n\tchown -R git:git gitTest.git\n\n**创建post-receive文件（若不使用git自启动属性可不操作）**\n\n\tvim ~/gitTest.git/hooks/post-receive\n\n**post-receive文件内容（若不使用git自启动属性可不操作）**\n\n\t#！/bin/sh\n\tgit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/gitTest/gitTest.git checkout -f\n\n**设置权限（若不使用git自启动属性可不操作）**\n\n\tchmod +x ~/gitTest.git/hooks/post-receive\n\n### **创建客户端口令**\n\n\tssh-keygen -t rsa -C '你的邮箱'\n\n### **设置免密登录口令**\n\n将id_rsa.pub中的内容写到服务器的authorized_keys文件中。\n\n\tcat id_rsa.pub >> authorized_keys\n\n\n### **请求git仓库**\n\n\tgit clone git@ip:/home/gitTest/gitTest.git"}]