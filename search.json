[{"title":"创建简单的npm脚手架","url":"%2Fblog%2Fnode%2F%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84npm%E8%84%9A%E6%89%8B%E6%9E%B6%2F","content":"\n## 前言\nvue-cli， webpack-cli 等脚手架是不是用起来爱不释手？自己写了个模版每次来回复制粘贴代码是不是很难维护？如果你是对前端、Node操作有一定的了解，同时也存在以上疑问，那就请尽情阅读尝试吧！\n\n本篇文章按照`al-block-cli`举例, `al-block-cli`是一个基于`vue`和`elementUI`而集成的一个开发模版，可安装进行使用\n\n## 依赖\n\n1. [Commander.js](https://github.com/tj/commander.js) 命令行工具\n2. [download-git-repo](https://github.com/flipxfx/download-git-repo) git仓库代码下载\n3. [chalk](https://github.com/chalk/chalk) 命令行输出样式美化\n4. [Inquirer.js](https://github.com/SBoudrias/Inquirer.js) 命令行交互\n5. [ora](https://github.com/sindresorhus/ora)命令行加载中效果\n\n根据上方的依赖插件即可以看出，**其实脚手架就是一个利用终端命令将仓库中的代码拉取到本地的工具**。*所以还没有模版代码的同学赶紧去创建个*\n\n## 项目准备\n\n### 初始化\n\n```\n$ npm init\n```\n\n> 根据提示完成初始化搭建，如果不清楚如何配置可以**直接回车**\n\n### 安装依赖\n\n```\n$ npm install commander download-git-repo chalk inquirer ora --save\n```\n### 构建结构\n\n创建`bin`和`commands`文件夹以及配置文件templates.json。bin文件夹为可执行命令入口目录，commands则负责编写一些命令交互\n\n### 最终目录结构\n\n```\n- al-block-cli\n| - bin\n| - commands\n| - node_modules\n| - package.json\n| - templates.json\n```\n## 编写代码\n\n### 配置文件\n\n输入默认需要的配置，如这里需要`github `的仓库地址和命令行的名称\n\n```\n{\n  \"init\": {\n    \"name\": \"init\",\n    \"path\": \"Alisdon/al-block-template\"\n  }\n}\n```\n\n### 入口文件\n\n新建`al-block-cli`文件，并在其第一行加入\n\n```\n#! /usr/bin/env node\n```\n> 此行为了防止操作系统用户没有将node装在默认的/usr/bin路径里。当系统看到这一行的时候，首先会到env设置里查找node的安装路径，再调用对应路径下的解释器程序完成操作。\n\n```\n#!/usr/bin/env node\n\nprocess.env.NODE_PATH = __dirname + '/../node_modules/';\n\nconst program = require('commander');\n\nprogram\n  .version(require('../package').version);\n\nprogram\n  .usage('<command>');\n\nprogram.command('init')\n  .description('create a new project')\n  .alias('i')\n  .action(() => {\n    require('../commands/init')\n  });\n\nprogram.parse(process.argv);\n\nif(!program.args.length){\n  program.help()\n}\n```\n### 命令交互\n\n新建`init.js`文件表示命令`init`\n\n```\nconst { prompt } = require('inquirer');\nconst program = require('commander');\nconst chalk = require('chalk');\nconst download = require('download-git-repo');\nconst ora = require('ora');\nconst fs = require('fs');\n\nconst option =  program.parse(process.argv).args[0];\nconst question = [\n  {\n    type: 'input',\n    name: 'name',\n    message: 'Project name',\n    default: typeof option === 'string' ? option : 'al-block-template',\n    filter (val) {\n      return val.trim()\n    },\n    validate (val) {\n      const validate = (val.trim().split(\" \")).length === 1;\n      return validate || 'Project name is not allowed to have spaces ';\n    },\n    transformer (val) {\n      return val;\n    }\n  },\n  {\n    type: 'input',\n    name: 'description',\n    message: 'Project description',\n    default: 'Vue project',\n    validate () {\n      return true;\n    },\n    transformer(val) {\n      return val;\n    }\n  },\n  {\n    type: 'input',\n    name: 'author',\n    message: 'Author',\n    default: '',\n    validate () {\n      return true;\n    },\n    transformer(val) {\n      return val;\n    }\n  }\n];\n\nmodule.exports = prompt(question).then(({name, description, author}) => {\n  const gitPlace = require('../templates').init.path;\n  const projectName = name;\n  const spinner = ora('Downloading please wait...');\n\n  spinner.start();\n  download(`${gitPlace}`, `./${projectName}`, (err) => {\n    if (err) {\n      console.log(chalk.red(err));\n      process.exit()\n    }\n\n    fs.readFile(`./${projectName}/package.json`, 'utf8', function (err, data) {\n      if(err) {\n        spinner.stop();\n        console.error(err);\n        return;\n      }\n\n      const packageJson = JSON.parse(data);\n      packageJson.name = name;\n      packageJson.description = description;\n      packageJson.author = author;\n\n      fs.writeFile(`./${projectName}/package.json`, JSON.stringify(packageJson, null, 2), 'utf8', function (err) {\n        if(err) {\n          spinner.stop();\n          console.error(err);\n        } else {\n          spinner.stop();\n          console.log(chalk.green('project init successfully!'))\n          console.log(`\n            ${chalk.yellow(`cd ${name}`)}\n            ${chalk.yellow('npm install')}\n            ${chalk.yellow('npm run dev')}\n          `);\n        }\n      });\n    });\n  })\n});\n\n```\n\n## 测试发布\n\n### 测试\n\n至此，一个简单的脚手架（壳）就已经完成了，为了查看在编写过程中是否出错，我们现在本地进行测试\n\n```\n$ node bin/al-block-cli\n```\n\n如果没有报错，出现了熟悉的命令行，那就说明成功了\n\n### 发布\n\n发布之前我们需要做个小调整，观察其他脚手架工具他们都是以自己独特的`key`值进行搭建，对此我们可以在`package.json`里面配置`bin`对象\n\n```\n\"bin\": {\n\t\"al-block-cli\": \"bin/al-block-cli\"\n}\n```\n\n> 这里需要注意`bin/`后面的`al-block-cli`,这个路径是由[入口文件](#入口文件)的路径确定，如果你是建的`al-block-cli.js`则此处应该配置`bin/al-block-cli.js`，本篇是创建的没有后缀名的文件\n\n修改后生成的最终`package.json`\n\n```\n{\n  \"name\": \"al-block-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"al-block-cli\",\n  \"keywords\": [\n    \"vue\",\n    \"al-block\",\n    \"al-block-cli\"\n  ],\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"bin\": {\n    \"al-block-cli\": \"bin/al-block-cli\"\n  },\n  \"preferGlobal\": true,\n  \"author\": \"Alisdon [920124512@qq.com]\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"chalk\": \"^2.4.1\",\n    \"commander\": \"^2.19.0\",\n    \"download-git-repo\": \"^1.1.0\",\n    \"inquirer\": \"^6.2.1\",\n    \"ora\": \"^3.0.0\"\n  }\n}\n```\n\n对比文件内容，如果没有问题我们就开始发布了\n\n```\n$ npm login\n$ npm publish\n```\n\n","tags":["node"],"categories":["node"]},{"title":"用于mmzsblog网站博客开发","url":"%2Fblog%2Fmmzsblog%2Fmmzsblog%2F","content":"\n## 前期准备\n\n以下代码均在系统命令行(*非node环境下的命令行*)下完成。\n\n- `cmd`打开*window系统*命令行\n- 直接在*mac系统*中打开`终端`\n\n### 安装nodeJs\n\n前往 [node官方下载地址](https://nodejs.org/en/download/)下载对应版本进行安装\n\n#### 检测安装状态\n\n```\n$ node -v\n```\n出现版本信息则表示安装成功\n### 安装git\n\n前往 [git官方下载地址](https://git-scm.com/downloads)下载对应版本进行安装\n#### 检测安装状态\n\n```\n$ git --version\n```\n出现版本信息则表示安装成功\n### 安装hexo\n\n```\n$ npm install -g hexo-cli\n```\n> 此步骤需要将`nodejs `安装成功后才可进行，否则将报`npm `命令不存在的错误\n\n#### 检测安装状态\n\n```\n$ hexo version\n```\n出现版本信息则表示安装成功\n\n\n## 克隆代码\n### 克隆框架代码\n\n```\n$ git clone git@www.mmzsblog.cn:/mmzsblog/blog.git\n```\n> 此步骤需要将`git`安装成功后才可进行，否则将报`git `命令不存在的错误。后续在**新增文章之前需要先更新框架代码**。拉取成功后默认文件夹名称为`blog`，本篇文章以`blog`为文件夹名称举例\n\n### 克隆主题代码\n\n```\n$ cd blog\n$ git clone git@www.mmzsblog.cn:/mmzsblog/theme.git themes/pure\n```\n\n> 此步骤需要将`git`安装成功后才可进行，否则将报`git `命令不存在的错误，由于框架代码中主题代码不能提交成功，所以将其分开获取。此代码只需要拉取一次，后续**新增文章之前可不再更新**\n\n## 安装依赖\n```\n$ npm install\n```\n执行成功上述操作将出现图中目录文件\n![](./hexom.png)\n\n## 开始创建\n### 新建文章\n创建文章之前先更新仓库代码，然后再创建一篇新文章\n\n```\n$ git pull\n$ hexo new 你的文章名称\n```\n\n打开**当前文件夹**下的`source/_post`目录，找到新建的文件*（一般是根据上方新建的文章名称作为文件名称）*进行编写\n\n### 静态图片的处理\n\n1. 放到`source/images`文件中，在文章中需要进行`![](/images/xxx.jpg)`的引入\n2. 直接放到和文章名称相同的文件夹中，在文章中需要进行`![](./xxx.png)`的引入\n\n### 预览文章\n```\n$ hexo server\t\t简写\t\thexo s\n```\n![](./hexos.png)\n\n> 打开浏览器输入`http://localhost:4000`进行访问。如果出现白板且控制台出现了`index.html`相关的问题则是由于没有获取主题导致的，需要前往<a href=\"#克隆主题代码\">克隆主题文件</a>\n\n## 发布文章\n由于`mmzsblog`是通过`github`进行重定向，所以将不做清理静态文件的操作，避免提交后需要重新设置的重复操作\n\n### 打包编译\n```\n$ git pull\n$ hexo generate \t 简写\t\thexo g\n```\n\n![](./hexog.png)\n\n### 发布提交\n```\n$ hexo deploy\t\t 简写\t\thexo d\n```\n\n![](./hexod.png)\n\t\n如果出现以上提示则说明提交成功，隔几分钟后刷新[https://blog.mmzsblog.cn](https://blog.mmzsblog.cn)即可查看刚刚新增的文章\n\t\n## 提交代码\n\n提交框架代码，避免多人开发时不同步的问题\n\n```\n$ git status\n$ git add .\n$ git commit -m '新增一篇文章'\n$ git push\n```","tags":["mmzsblog"],"categories":["mmzsblog"]},{"title":"mac下安装nginx","url":"%2Fblog%2Fmac%2Fmac%20%E4%B8%8B%E5%AE%89%E8%A3%85nginx%2F","content":"\n## 初识nginx\n相信大多数同学已经听说了nginx这个东东，会不会很多同学和我一样一开始接触nginx的时候不知道它是什么？它能干什么？如果需要启服务，完全可以用node，为什么还需要使用nginx？\n\n对以上问题，我先引用一下官方对nginx的介绍\n\n> \"Nginx是一款轻量级的HTTP服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的IO性能，时常用于服务端的反向代理和负载均衡。\"\n\n### nginx的应用场景\n\n 1. **http服务器**。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。\n 2. **虚拟主机**。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。\n 3. **反向代理，负载均衡**。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。\n\n### nginx的优点\nnginx的优点在应用场景中已有体现，比如上面提到的反向代理，负载均衡功能。除此之外还有以下优势\n\n- **支持海量高并发**：采用IO多路复用epoll。官方测试Nginx能够支持5万并发链接，实际生产环境中可以支撑2-4万并发连接数。\n- **内存消耗少**：在主流的服务器中Nginx目前是内存消耗最小的。\n- **配置文件简单**：网络和程序配置通俗易懂，即使非专业运维也能看懂。\n- **支持热部署**：这对于我们前端的同学来说，使用惯webpack的热更新，对热更新的支持，无疑是吸引了一大波同学（我就算其中一个，啊哈哈）\n\n![](/blog/images/nginx-c.jpg)\n\n## 安装nginx\n前面铺垫了这么多，现在终于进入主题了。本教程是使用homebrew进行安装，未安装brew的同学请自行安装\n\n\tbrew install nginx\n\n![](/blog/images/nginx-install.png)\n### 配置文件地址\n安装成功后需要对配置文件进行个性化定制，本教程提供大部分时间需要修改的配置，配置文件在如下地址处\n\n*/usr/local/etc/nginx/nginx.conf*\n\n### 默认根目录\n是否想知道网址访问的哪份文件呢？来，我们一起打开它\n\n*/usr/local/var/www/*\n\n## 启动重启关闭\n成功安装后，我们肯定就是来使用nginx了，你可使用\n\n\tnginx \n\t\n**直接启动**或者使用\n\n\tnginx -s reload|reopen|stop|quit \n\n**重新加载配置|重启|快速停止|安全关闭**\n\n启动成功后，我们就只需要在浏览器中访问服务（地址）就好了\n\n*http://localhost:8080*\n\n![](/blog/images/nginx-open.png)\n\n## 自定义配置\n### 修改访问端口\n默认8080被占用了？或者你看8080端口不爽？来，我们一起灭了它\n\n![](/blog/images/nginx-port.png)\n\n### 修改默认根目录\n修改完8080，你是否觉得用默认的网站根目录很难找？是不是想换成自己熟悉的目录呢？\n\n![](/blog/images/nginx-path.png)\n\n> tips: 配置文件里`location /` 里面的`root`,将`yourname`换成你电脑的用户名\n\n## 异常处理\n### Permission问题\n这种问题都是没有权限引起的，执行代码前加上sudo即可\n\n![](/blog/images/nginx-permission.png)\n\n### Forbidden\n修改了默认的网站根目录，出现问题时避免不了的。但是怎么办呢？这种问题一般是没有找到对应的文件，要不就是权限的问题\n\n1. 查看目录下是否存在`index.html`或者`index.htm`\n\n2. 修改配置文件第一行为 `user root owner;` 然后重启\n\n### File not find\n同上 <a href=\"#Forbidden\"> Forbidden </a>的解决方案\n\n## 卸载nginx\n好了，最后，如果你还是觉得nginx用起来不爽，更喜欢node，Apache什么的，勇敢的卸载它吧\n\n\tbrew uninstall nginx\n","tags":["nginx"],"categories":["mac"]},{"title":"安装hexo","url":"%2Fblog%2F%E5%85%B6%E4%BB%96%2F%E5%AE%89%E8%A3%85hexo%2F","content":"\n### 安装hexo \n\n```\n$ npm install -g hexo-cli\n```\n\n### 初始化项目 \n\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install``\n```\n\n### 启动项目 \n```\n$ hexo server\n```\n\n### 更换主题 \n选择喜欢的[主题](https://hexo.io/themes/)并根据选择的主题进行更换，并将_config.yml中的theme主题替换成在文件夹theme中的文件名称, 添加主题中需要的图片等素材","tags":["其他"],"categories":["其他"]},{"title":"hexo书写一篇文章","url":"%2Fblog%2F%E5%85%B6%E4%BB%96%2Fhexo%E4%B9%A6%E5%86%99%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate (hexo g)\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy (hexo d)\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["其他"],"categories":["其他"]},{"title":"linux下实现无密操作git","url":"%2Fblog%2Flinux%2Flinux%E4%B8%8B%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%AF%86%E6%93%8D%E4%BD%9Cgit%2F","content":"\n### linux服务端配置\n\n**linux安装git**\n\n\tyum install -y git\n\n**创建用户git**\n\n\tgroupadd git\n\tadduser git -g git\n\t\n**配置linux权限问题及创建authorized_keys文件**\n\n\tcd /home/git\n\tmkdir .ssh\n\tchmod 700 .ssh\n\ttouch .ssh/authorized_keys\n\tchmod 600 .ssh/authorized_keys\n\tcd /home\n\tchown -R git:git git\n\n\tTips:后续的git clone如果需要密码，很有可能是git用户没有访问authorized_keys文件的权限\n\n**创建git仓库文件夹**\n\n\tcd /home\n\tmkdir gitTest\n\tchown git:git gitTest //赋予git用户权限\n\n**初始化git仓库**\n\n\tcd gitTest\n\tgit init --bare gitTest.git\n\n**把仓库所属用户改为git**\n\n\tchown -R git:git gitTest.git\n\n**创建post-receive文件（若不使用git自启动属性可不操作）**\n\n\tvim ~/gitTest.git/hooks/post-receive\n\n**post-receive文件内容（若不使用git自启动属性可不操作）**\n\n\t#！/bin/sh\n\tgit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/gitTest/gitTest.git checkout -f\n\n**设置权限（若不使用git自启动属性可不操作）**\n\n\tchmod +x ~/gitTest.git/hooks/post-receive\n\n### **创建客户端口令**\n\n\tssh-keygen -t rsa -C '你的邮箱'\n\n### **设置免密登录口令**\n\n将id_rsa.pub中的内容写到服务器的authorized_keys文件中。\n\n\tcat id_rsa.pub >> authorized_keys\n\n\n### **请求git仓库**\n\n\tgit clone git@ip:/home/gitTest/gitTest.git","tags":["git"],"categories":["linux"]}]