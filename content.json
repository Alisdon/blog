{"meta":{"title":"Alisdon Blog","subtitle":"Time is the most precious wealth of all wealth","description":"wlf的博客","author":"Alisdon","url":"https://alisdon.github.com"},"pages":[{"title":"分类","date":"2018-11-21T07:05:50.390Z","updated":"2018-11-21T02:34:17.089Z","comments":false,"path":"categories/index.html","permalink":"https://alisdon.github.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-11-21T07:05:50.403Z","updated":"2018-11-21T02:34:17.089Z","comments":false,"path":"about/index.html","permalink":"https://alisdon.github.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"标签","date":"2018-11-21T07:05:50.319Z","updated":"2018-11-21T02:34:17.090Z","comments":false,"path":"tags/index.html","permalink":"https://alisdon.github.com/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-11-21T07:05:50.348Z","updated":"2018-11-21T02:34:17.089Z","comments":true,"path":"links/index.html","permalink":"https://alisdon.github.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-11-21T07:05:50.334Z","updated":"2018-11-21T02:34:17.090Z","comments":false,"path":"repository/index.html","permalink":"https://alisdon.github.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"微信小程序和移动网页的相爱相杀","slug":"微信小程序和移动网页的相爱相杀","date":"2020-03-18T13:07:16.000Z","updated":"2020-03-18T15:46:37.893Z","comments":true,"path":"小程序/微信小程序和移动网页的相爱相杀/","link":"","permalink":"https://alisdon.github.com/小程序/微信小程序和移动网页的相爱相杀/","excerpt":"","text":"两者身为同一个时代的产物，存在太多志同道合、“异性相吸”的魔力，又有着不拘一格、“同性相斥”的魅力。但可以确定的是，两者身上都有一种为了实现世界统一的魄力。 生死之战 pk 项 h5 mp-weixin 运行环境 浏览器 微信 系统API权限 弱 强 分享朋友圈 能 不能 扫码识别 能 能 支付能力 多种 微信支付 使用流畅/平滑 一般 良好 入口数量 少 多 专属入口 无 有 简易功能成本 低 低 系统功能成本 高 低 迭代周期 短 较长 外部限制 较少 多 跨界合作准备工作 注册小程序账号必须为企业的，个人类型的小程序暂不支持使用 微信 6.7.2 版本以上(目前安卓最新版 7.0.12/苹果 7.0.11) 需登录小程序管理后台配置业务域名 基础库1.6.4以上 命令部署 业务域名中配置的就是小程序以及 H5 和 H5 中引用 iframe 的域名 将校验文件放置在将要嵌套的业务域名的根目录 统一战线 嵌入的 h5 不能调用支付接口 嵌入的 h5 拿不到分享成功失败的信息 互帮互助 mp -&gt; h5 使用 src 地址传值 h5 -&gt; mp postMessage, web-view 绑定 bindmessage 进行接收 weixinjssdk tips: bindMessage为网页向小程序 postMessage 时，会在特定时机（小程序后退、组件销毁、分享）触发并收到消息 矛盾冲突","categories":[{"name":"小程序","slug":"小程序","permalink":"https://alisdon.github.com/categories/小程序/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://alisdon.github.com/tags/小程序/"}]},{"title":"text-align 两端对齐","slug":"text-align-两端对齐","date":"2020-02-13T15:33:11.000Z","updated":"2020-02-13T15:47:17.790Z","comments":true,"path":"css/text-align-两端对齐/","link":"","permalink":"https://alisdon.github.com/css/text-align-两端对齐/","excerpt":"","text":"### 简单总结都知道想实现两端对齐可以使用 text-align:justify，但是每次使用或多或少都会出现一些问题。对于这些问题我们就来总结一下 1text-align: justify； 兼容性好，能兼容 ios，但只针对非尾行即最后一行之前的文本 1text-align-last: justify； 兼容性差，不兼容 ios，只针对尾行的文本 1white-space: nowrap; 设置该属性后不生效 只有一行的时候那就需要特殊的处理一下了 使用 text-align-last 手动添加一行最为最后行，并将其隐藏 小程序端实现wxml 1234567891011&lt;view class=\"foods\"&gt; &lt;view class=\"eat\"&gt; &lt;view&gt;早上吃什么&lt;text&gt;&lt;/text&gt;&lt;/view&gt;: 洗衣粉 &lt;/view&gt; &lt;view class=\"eat\"&gt; &lt;view&gt;午餐呢&lt;text&gt;&lt;/text&gt;&lt;/view&gt;: 肥皂 &lt;/view&gt; &lt;view class=\"eat\"&gt; &lt;view&gt;最重要的晚餐&lt;text&gt;&lt;/text&gt;&lt;/view&gt;: 沐浴露 &lt;/view&gt;&lt;/view&gt; wxss 123456789101112131415161718.eat &#123; line-height:100rpx&#125;.eat + .eat &#123; border-top:1rpxsolid #f5f5f5&#125;.eat view &#123; height:100rpx; width:240rpx; display: inline-block; text-align:justify; vertical-align:top&#125;.eat view text &#123; display: inline-block; height:0; width:100% /* 换行 */&#125;","categories":[{"name":"css","slug":"css","permalink":"https://alisdon.github.com/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://alisdon.github.com/tags/css/"}]},{"title":"mac 创建 svn 仓库","slug":"mac 创建 svn 仓库","date":"2020-01-19T02:35:49.000Z","updated":"2020-01-19T05:37:47.309Z","comments":true,"path":"其他/mac 创建 svn 仓库/","link":"","permalink":"https://alisdon.github.com/其他/mac 创建 svn 仓库/","excerpt":"","text":"mac 创建 svn 仓库团队开发中代码版本管理是一个必不可少的工具，本篇文章将简单介绍如何在 macOS 中搭建 svn 版本服务 安装 svn检查安装开始之前，先检查系统中是否已经安装了 svn 1svn --version 如果出现版本信息，则表示已经安装成功，可跳过以下安装步骤至创建仓库 开始安装在 macOS 中，一般我建议使用 Homebrew 进行包管理，至于 Homebrew 本篇文章不做描述，不了解的可以自行百度 1brew install svn 安装成功后，建议再检查安装一次，以确保能够正常使用 创建仓库在安装成功之后咱们就可以创建代码仓库了 1svnadmin create ./svn/repository/svn_test ./svn/repository/svn_test 为你想存放 svn 仓库的文件地址，svn_test 为当前仓库名称，这里换成你自己的即可 正常情况下，你将可以在你刚刚输入的目录中看到新生成的文件夹了，但是 macOS 升级成 macOS catalina 10.15 后将会出现 1zsh: command not found: svnadmin 这个是因为 Apple 在这个版本中移除了 svn 管理，所以导致了 svn 相关的命令失效，这里多说一句 Apple 的这个更新可能会导致一部分的软件需要重新安装，如果遇到了不能正常使用的软件，大家不妨重新安装试一试 配置权限安装成功后，进入到你刚刚设置的目录中，如我们设置的 ./svn/repository/svn_test，你将看见大致（只展示我们需要的部分）如下的目录 12345678910|-- conf|---- authz|---- hooks-env.tmpl|---- passwd|---- svnserve.conf|-- db|-- hooks|-- locks|-- format|-- README.txt 权限打开 conf 下的 svnserve.conf 文件并做以下修改 1234567891011# anon-access = readanon-access = read# auth-access = writeauth-access = write# password-db = passwdpassword-db = passwd# authz-db = authzauthz-db = authz 以上修改为上一行为原始配置，下一行为修改后的配置 以上配置信息的含义请自行百度 用户打开 conf 下的 passwd 文件并做以下修改 1234[users]svnuser1 = 123456svnuser2 = 123456 添加用户名为 svnuser1，密码为 123456 和用户名为 svnuser2，密码为 123456 的两位用户 分组授权打开 conf 下的 authz 文件并做以下修改 12345[groups]svngroup = svnuser1,svnuser2[/]@svngroup=rw rw为可读可写 启动服务返回控制台输入 1svnserve -d -r ./svn/repository 这里需要控制所建仓库地址，不需要进行至仓库名称 如果控制台没有报错则说明启动成功 连接服务启动成功后，我们将远程的代码进行拉去，尽管现在没有代码，我们也可以先将仓库拉下来用于后续代码管理 1svn checkout svn://localhost/svn_test --username=svnuser1 --password=123456 ./code 将代码从 svn_test 下载到 ./code 目录下 关闭服务因为 svn 服务就是一个进程，所以可以通过杀进程的方式进行管理 方法一（推荐）：打开系统软件《活动监视器》 选择 svnserve 进行关闭即可。 方法二获取 svn 的 PID 1ps -ef|grep svn 杀掉进程 1kill -9 $1 $1 为上面获取到的 PID 至此这样一个 svn 代码管理仓库就搭建完成了，我们就可以用 svn 来进行我们的代码管理","categories":[{"name":"其他","slug":"其他","permalink":"https://alisdon.github.com/categories/其他/"}],"tags":[{"name":"svn","slug":"svn","permalink":"https://alisdon.github.com/tags/svn/"}]},{"title":"docker 镜像","slug":"docker镜像","date":"2019-04-13T15:33:11.000Z","updated":"2020-02-13T16:04:02.674Z","comments":true,"path":"其他/docker镜像/","link":"","permalink":"https://alisdon.github.com/其他/docker镜像/","excerpt":"","text":"mysql获取镜像1docker pull mysql 运行容器12345678docker run-d-v $PWD/mysql/conf:/etc/mysql/conf.d-v $PWD/mysql/logs:/logs-v $PWD/mysql/data:/var/lib/mysql-e MYSQL_ROOT_PASSWORD=root-p 13306:3306mysql $PWD 为当前目录，可当变量使用 -d：在后台运行 -p：容器的 3306 端口映射到宿主机 13306 -v：容器的 /etc/mysql/conf.d 配置文件映射到宿主机 $PWD/mysql/conf -e：mysql root 用户的密码 navicat连接查看加密特性 1select Host,User,plugin from mysql.user; 如出现以下情况 Host User plugin % root caching_sha2_password 则执行 1ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root'; 最后的root为账号密码 设置成功后就可以进行navicat连接 mongodb获取镜像1docker pull mongo 运行容器123456docker run -d -v $PWD/mongodb/db:/data/db -p 27017:27017 --name mongodb mongo -d：在后台运行 -v：容器的 /data/db 数据配置文件映射到宿主机 $PWD/mongodb/db -p：容器的 27017 端口映射到宿主机 27017 –name：容器的名字为 mongodb jenkins获取镜像1docker pull jenkins/jenkins:lts 运行容器123456docker run -d -v $PWD/jenkins:/var/jenkins_home -p 13050:8080--name jenkins jenkins/jenkins:lts 与上面的说明一致 进入容器1docker exec -it [CONTAINER ID] /bin/bash nginx获取镜像1docker pull nginx 运行容器运行一个简单的 nginx 1docker run -d -p 80:80 --name nginx nginx 将容器中 nginx 的配置文件复制到 . 当前目录下 1docker cp nginx:/etc/nginx . 修改配置文件后即可停止并删除 nginx 服务 12docker stop nginxdocker rm nginx 目录映射 —- 使修改的配置生效 123456docker run-d-v $PWD/nginx/conf:/etc/nginx-v $PWD/nginx/html:/usr/share/nginx/html-p 80:80nginx 与上面的说明一致 docker常用命令123456789docker images // 查看已有的docker镜像docker ps // 查看所有运行中容器docker ps -a // 查看所有状态的容器docker start [ID] // 启动指定ID容器docker stop [ID] // 停止指定ID容器docker restart [ID] // 重启指定ID容器docker rm [ID] // 删除指定ID容器docker rmi [NAME] // 删除特定镜像docker exec -it [CONTAINER ID] /bin/bash //进入容器","categories":[{"name":"其他","slug":"其他","permalink":"https://alisdon.github.com/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://alisdon.github.com/tags/其他/"}]},{"title":"","slug":"跨页面传值","date":"2019-03-30T08:25:22.899Z","updated":"2019-03-30T08:25:22.899Z","comments":true,"path":"uncategorized/跨页面传值/","link":"","permalink":"https://alisdon.github.com/uncategorized/跨页面传值/","excerpt":"","text":"跨页面传值 postMessage 需要iframe嵌套使用，可解决例外页面跨域的问题 localStorage 需要同一个浏览器的两个页面 websocket 需要服务端支持","categories":[],"tags":[]},{"title":"uni-app","slug":"uni-app踩过的坑","date":"2019-03-24T06:43:01.000Z","updated":"2019-03-27T15:11:21.816Z","comments":true,"path":"混合开发/uni-app踩过的坑/","link":"","permalink":"https://alisdon.github.com/混合开发/uni-app踩过的坑/","excerpt":"","text":"在uni-app进行多端开发总结H5非H5 不可对uni进行属性添加 不可使用slot属性 不可上传非图片文件 微信小程序支付宝小程序 不可使用高度100% 需要将导航栏的背景设置成#fff才可以显示标题","categories":[{"name":"混合开发","slug":"混合开发","permalink":"https://alisdon.github.com/categories/混合开发/"}],"tags":[{"name":"uni-app","slug":"uni-app","permalink":"https://alisdon.github.com/tags/uni-app/"}]},{"title":"小程序获取特定页二维码","slug":"小程序获取特定页二维码","date":"2019-01-04T05:55:37.000Z","updated":"2019-01-04T06:10:27.680Z","comments":true,"path":"小程序/小程序获取特定页二维码/","link":"","permalink":"https://alisdon.github.com/小程序/小程序获取特定页二维码/","excerpt":"","text":"准备工作 确保页面路径存在app.json文件中 获取小程序的AppId和AppSecret 下载postman工具 开始获取微信提供了「获取小程序二维码」的接口。通过这个接口，商家和开发者能够制作进入不同页面的小程序二维码，而不会限定扫码进入小程序主页。 获取Access Token利用postman工具根据准备的AppID和AppSecret，获取 Access Token。 使用get方式请求地址https://api.weixin.qq.com/cgi-bin/token，传入以下参数 12345&#123; grant_type: client_credential, appid: 你的AppId, secret: 你的AppSecret&#125; 点击Send出现图中所示则表示请求成功，其中access_token就是我们需要的值 获取二维码微信提供了两个POST获取小程序二维码的接口 获取最新的「菊花式」小程序码，可以使用这个接口： 1https://api.weixin.qq.com/wxa/getwxacode?access_token=ACCESS_TOKEN。 获取经典的「狗皮膏药式」QR 码，可以使用这个接口： 1https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token=ACCESS_TOKEN 在postman中输入以上地址后需要修改POST请求体中的请求方式为raw, 并修改JSON请求体为 1&#123;\"path\": \"pages/discover/article/index?type=1\"&#125; 最终配置如下 如果请求成功则会返回小程序的二维码图片","categories":[{"name":"小程序","slug":"小程序","permalink":"https://alisdon.github.com/categories/小程序/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://alisdon.github.com/tags/微信小程序/"}]},{"title":"用vertical-align实现垂直水平居中","slug":"verticalAlign简介","date":"2019-01-02T08:07:16.000Z","updated":"2019-01-04T01:33:13.544Z","comments":true,"path":"css/verticalAlign简介/","link":"","permalink":"https://alisdon.github.com/css/verticalAlign简介/","excerpt":"","text":"简介vertical-align属于css中用的比较少的一个属性，其原因就是它比较难于理解，但它是同时也是一个比较重要的属性。首先引用一段对它的定义说明 该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。 对此我们得到了两层重要信息 该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。注意其中的行内元素，说明该属性只对行内元素有效 表格的td中直接添加vertical-align: middle的样式让其垂直居中对齐，添加vertical-align: top顶部对齐。 Tips: 该属性与水平对齐方式属性text-align不同，使用对象是linebox下的行内元素 什么是Line Box 每一行称为一条Line Box，它又是由这一行的许多inline-box组成，它的高度可以直接由line-height决定，line boxes的高度垂直堆叠形成了containing box的高度，就是我们见到的div或是p标签之类的高度了 baseline传送门 实际应用垂直居中 为父元素设定一个伪元素::after,其高度为父元素的高度并设置display:inline-block让其成为lineBox元素,将::after设定为vertical-align:middle即可撑开lineBox，同时lineBox的baseline为父元素高度一半的位置。然后设定子元素vertical-align:middle，即可实现居中。 考虑兼容性的话，这里需要使用一些hack，由于IE8不支持::after伪元素，所以需要一个span来替代。而display:inline-block亦需要hack。 代码示例： 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; .masker-model &#123; background-color: #000; opacity: .6; z-index: 999; position: fixed; left: 0; right: 0; top: 0; bottom: 0; text-align: center; &#125; .masker-model::after &#123; content: ''; display: inline-block; height: 100%; vertical-align: middle; &#125; .loading &#123; color: #fff; display: inline-block; vertical-align: middle; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"masker-model\"&gt; &lt;div class=\"loading\"&gt;loading....&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"css","slug":"css","permalink":"https://alisdon.github.com/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://alisdon.github.com/tags/css/"}]},{"title":"创建简单的npm脚手架","slug":"创建简单的npm脚手架","date":"2018-12-18T08:57:18.000Z","updated":"2019-02-13T02:46:16.038Z","comments":true,"path":"服务端/创建简单的npm脚手架/","link":"","permalink":"https://alisdon.github.com/服务端/创建简单的npm脚手架/","excerpt":"","text":"前言vue-cli， webpack-cli 等脚手架是不是用起来爱不释手？自己写了个模版每次来回复制粘贴代码是不是很难维护？如果你是对前端、Node操作有一定的了解，同时也存在以上疑问，那就请尽情阅读尝试吧！ 本篇文章按照al-block-cli举例, al-block-cli是一个基于vue和elementUI而集成的一个开发模版，可安装进行使用 依赖 Commander.js 命令行工具 download-git-repo git仓库代码下载 chalk 命令行输出样式美化 Inquirer.js 命令行交互 ora命令行加载中效果 根据上方的依赖插件即可以看出，其实脚手架就是一个利用终端命令将仓库中的代码拉取到本地的工具。所以还没有模版代码的同学赶紧去创建个 项目准备Npm初始化1$ npm init 根据提示完成初始化搭建，如果不清楚如何配置可以直接回车 安装依赖1$ npm install commander download-git-repo chalk inquirer ora --save 构建结构 创建bin和commands文件夹以及配置文件templates.json。 在bin目录下创建入口文件al-block-cli，在commands目录下创建命令指示文件init.js bin文件夹为可执行命令入口目录，commands则负责编写一些命令交互， 最终目录结构12345678- al-block-cli| - bin | - al-blocl-cli| - commands | - init.js| - node_modules| - package.json| - templates.json 编写代码配置文件输入默认需要的配置，如这里需要github的仓库地址和命令行的名称 123456&#123; \"init\": &#123; \"name\": \"init\", \"path\": \"Alisdon/al-block-template\" &#125;&#125; 入口文件打开al-block-cli文件，并在其第一行加入 1#! /usr/bin/env node 此行为了防止操作系统用户没有将node装在默认的/usr/bin路径里。当系统看到这一行的时候，首先会到env设置里查找node的安装路径，再调用对应路径下的解释器程序完成操作。 123456789101112131415161718192021222324#!/usr/bin/env nodeprocess.env.NODE_PATH = __dirname + '/../node_modules/';const program = require('commander');program .version(require('../package').version);program .usage('&lt;command&gt;');program.command('init') .description('create a new project') .alias('i') .action(() =&gt; &#123; require('../commands/init') &#125;);program.parse(process.argv);if(!program.args.length)&#123; program.help()&#125; 命令交互打开表示命令init的init.js文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192const &#123; prompt &#125; = require('inquirer');const program = require('commander');const chalk = require('chalk');const download = require('download-git-repo');const ora = require('ora');const fs = require('fs');const option = program.parse(process.argv).args[0];const question = [ &#123; type: 'input', name: 'name', message: 'Project name', default: typeof option === 'string' ? option : 'al-block-template', filter (val) &#123; return val.trim() &#125;, validate (val) &#123; const validate = (val.trim().split(\" \")).length === 1; return validate || 'Project name is not allowed to have spaces '; &#125;, transformer (val) &#123; return val; &#125; &#125;, &#123; type: 'input', name: 'description', message: 'Project description', default: 'Vue project', validate () &#123; return true; &#125;, transformer(val) &#123; return val; &#125; &#125;, &#123; type: 'input', name: 'author', message: 'Author', default: '', validate () &#123; return true; &#125;, transformer(val) &#123; return val; &#125; &#125;];module.exports = prompt(question).then((&#123;name, description, author&#125;) =&gt; &#123; const gitPlace = require('../templates').init.path; const projectName = name; const spinner = ora('Downloading please wait...'); spinner.start(); download(`$&#123;gitPlace&#125;`, `./$&#123;projectName&#125;`, (err) =&gt; &#123; if (err) &#123; console.log(chalk.red(err)); process.exit() &#125; fs.readFile(`./$&#123;projectName&#125;/package.json`, 'utf8', function (err, data) &#123; if(err) &#123; spinner.stop(); console.error(err); return; &#125; const packageJson = JSON.parse(data); packageJson.name = name; packageJson.description = description; packageJson.author = author; fs.writeFile(`./$&#123;projectName&#125;/package.json`, JSON.stringify(packageJson, null, 2), 'utf8', function (err) &#123; if(err) &#123; spinner.stop(); console.error(err); &#125; else &#123; spinner.stop(); console.log(chalk.green('project init successfully!')) console.log(` $&#123;chalk.yellow(`cd $&#123;name&#125;`)&#125; $&#123;chalk.yellow('npm install')&#125; $&#123;chalk.yellow('npm run dev')&#125; `); &#125; &#125;); &#125;); &#125;)&#125;); 测试发布测试至此，一个简单的脚手架（壳）就已经完成了，为了查看在编写过程中是否出错，我们现在本地进行测试 1$ node bin/al-block-cli 如果没有报错，出现了熟悉的命令行，那就说明成功了 发布发布之前我们需要做个小调整，观察其他脚手架工具他们都是以自己独特的key值进行搭建，对此我们可以在package.json里面配置bin对象 123\"bin\": &#123; \"al-block-cli\": \"bin/al-block-cli\"&#125; 这里需要注意bin/后面的al-block-cli,这个路径是由入口文件的路径确定，如果你是建的al-block-cli.js则此处应该配置bin/al-block-cli.js，本篇是创建的没有后缀名的文件 修改后生成的最终package.json 1234567891011121314151617181920212223242526&#123; \"name\": \"al-block-cli\", \"version\": \"1.0.0\", \"description\": \"al-block-cli\", \"keywords\": [ \"vue\", \"al-block\", \"al-block-cli\" ], \"scripts\": &#123; \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" &#125;, \"bin\": &#123; \"al-block-cli\": \"bin/al-block-cli\" &#125;, \"preferGlobal\": true, \"author\": \"Alisdon [920124512@qq.com]\", \"license\": \"MIT\", \"dependencies\": &#123; \"chalk\": \"^2.4.1\", \"commander\": \"^2.19.0\", \"download-git-repo\": \"^1.1.0\", \"inquirer\": \"^6.2.1\", \"ora\": \"^3.0.0\" &#125;&#125; 对比文件内容，如果没有问题我们就开始发布了 12$ npm login$ npm publish","categories":[{"name":"服务端","slug":"服务端","permalink":"https://alisdon.github.com/categories/服务端/"}],"tags":[{"name":"node","slug":"node","permalink":"https://alisdon.github.com/tags/node/"}]},{"title":"用于mmzsblog网站博客开发","slug":"mmzsblog","date":"2018-11-20T13:07:16.000Z","updated":"2019-02-13T06:10:18.285Z","comments":true,"path":"mmzsblog/mmzsblog/","link":"","permalink":"https://alisdon.github.com/mmzsblog/mmzsblog/","excerpt":"","text":"前期准备以下代码均在系统命令行(非node环境下的命令行)下完成。 cmd打开window系统命令行 直接在mac系统中打开终端 安装nodeJs前往 node官方下载地址下载对应版本进行安装 检测安装状态1$ node -v 出现版本信息则表示安装成功 安装git前往 git官方下载地址下载对应版本进行安装 检测安装状态1$ git --version 出现版本信息则表示安装成功 安装hexo1$ npm install -g hexo-cli 此步骤需要将nodejs安装成功后才可进行，否则将报npm命令不存在的错误 检测安装状态1$ hexo version 出现版本信息则表示安装成功 克隆代码克隆框架代码1$ git clone git@118.24.19.22:/mmzsblog/blog.git 此步骤需要将git安装成功后才可进行，否则将报git命令不存在的错误。后续在新增文章之前需要先更新框架代码。拉取成功后默认文件夹名称为blog，本篇文章以blog为文件夹名称举例 克隆主题代码12$ cd blog$ git clone git@118.24.19.22:/mmzsblog/theme.git themes/pure 此步骤需要将git安装成功后才可进行，否则将报git命令不存在的错误，由于框架代码中主题代码不能提交成功，所以将其分开获取。此代码只需要拉取一次，后续新增文章之前可不再更新 安装依赖1$ npm install 执行成功上述操作将出现图中目录文件 开始创建新建文章创建文章之前先更新仓库代码，然后再创建一篇新文章 12$ git pull$ hexo new 你的文章名称 打开当前文件夹下的source/_post目录，找到新建的文件（一般是根据上方新建的文章名称作为文件名称）进行编写 静态图片的处理 放到source/images文件中，在文章中需要进行![](/images/xxx.jpg)的引入 直接放到和文章名称相同的文件夹中，在文章中需要进行![](./xxx.png)的引入 预览文章1$ hexo server 简写 hexo s 打开浏览器输入http://localhost:4000进行访问。如果出现白板且控制台出现了index.html相关的问题则是由于没有获取主题导致的，需要前往克隆主题文件 发布文章由于mmzsblog是通过github进行重定向，所以将不做清理静态文件的操作，避免提交后需要重新设置的重复操作 打包编译12$ git pull$ hexo generate 简写 hexo g 发布提交1$ hexo deploy 简写 hexo d 如果出现以上提示则说明提交成功，隔几分钟后刷新https://blog.mmzsblog.cn即可查看刚刚新增的文章 提交代码提交框架代码，避免多人开发时不同步的问题 1234$ git status$ git add .$ git commit -m '新增一篇文章'$ git push","categories":[{"name":"mmzsblog","slug":"mmzsblog","permalink":"https://alisdon.github.com/categories/mmzsblog/"}],"tags":[{"name":"mmzsblog","slug":"mmzsblog","permalink":"https://alisdon.github.com/tags/mmzsblog/"}]},{"title":"mac下安装nginx","slug":"mac 下安装nginx","date":"2018-10-19T06:14:37.000Z","updated":"2019-01-04T01:37:27.439Z","comments":true,"path":"服务端/mac 下安装nginx/","link":"","permalink":"https://alisdon.github.com/服务端/mac 下安装nginx/","excerpt":"","text":"初识nginx相信大多数同学已经听说了nginx这个东东，会不会很多同学和我一样一开始接触nginx的时候不知道它是什么？它能干什么？如果需要启服务，完全可以用node，为什么还需要使用nginx？ 对以上问题，我先引用一下官方对nginx的介绍 “Nginx是一款轻量级的HTTP服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的IO性能，时常用于服务端的反向代理和负载均衡。” nginx的应用场景 http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。 虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。 反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。 nginx的优点nginx的优点在应用场景中已有体现，比如上面提到的反向代理，负载均衡功能。除此之外还有以下优势 支持海量高并发：采用IO多路复用epoll。官方测试Nginx能够支持5万并发链接，实际生产环境中可以支撑2-4万并发连接数。 内存消耗少：在主流的服务器中Nginx目前是内存消耗最小的。 配置文件简单：网络和程序配置通俗易懂，即使非专业运维也能看懂。 支持热部署：这对于我们前端的同学来说，使用惯webpack的热更新，对热更新的支持，无疑是吸引了一大波同学（我就算其中一个，啊哈哈） 安装nginx前面铺垫了这么多，现在终于进入主题了。本教程是使用homebrew进行安装，未安装brew的同学请自行安装 brew install nginx 配置文件地址安装成功后需要对配置文件进行个性化定制，本教程提供大部分时间需要修改的配置，配置文件在如下地址处 /usr/local/etc/nginx/nginx.conf 默认根目录是否想知道网址访问的哪份文件呢？来，我们一起打开它 /usr/local/var/www/ 启动重启关闭成功安装后，我们肯定就是来使用nginx了，你可使用 nginx 直接启动或者使用 nginx -s reload|reopen|stop|quit 重新加载配置|重启|快速停止|安全关闭 启动成功后，我们就只需要在浏览器中访问服务（地址）就好了 http://localhost:8080 自定义配置修改访问端口默认8080被占用了？或者你看8080端口不爽？来，我们一起灭了它 修改默认根目录修改完8080，你是否觉得用默认的网站根目录很难找？是不是想换成自己熟悉的目录呢？ tips: 配置文件里location / 里面的root,将yourname换成你电脑的用户名 异常处理Permission问题这种问题都是没有权限引起的，执行代码前加上sudo即可 Forbidden修改了默认的网站根目录，出现问题时避免不了的。但是怎么办呢？这种问题一般是没有找到对应的文件，要不就是权限的问题 查看目录下是否存在index.html或者index.htm 修改配置文件第一行为 user root owner; 然后重启 File not find同上 Forbidden 的解决方案 卸载nginx好了，最后，如果你还是觉得nginx用起来不爽，更喜欢node，Apache什么的，勇敢的卸载它吧 brew uninstall nginx","categories":[{"name":"服务端","slug":"服务端","permalink":"https://alisdon.github.com/categories/服务端/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://alisdon.github.com/tags/nginx/"}]},{"title":"安装hexo","slug":"安装hexo","date":"2018-07-27T16:12:50.132Z","updated":"2018-12-19T04:19:14.333Z","comments":true,"path":"其他/安装hexo/","link":"","permalink":"https://alisdon.github.com/其他/安装hexo/","excerpt":"","text":"安装hexo1$ npm install -g hexo-cli 初始化项目123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install`` 启动项目1$ hexo server 更换主题选择喜欢的主题并根据选择的主题进行更换，并将_config.yml中的theme主题替换成在文件夹theme中的文件名称, 添加主题中需要的图片等素材","categories":[{"name":"其他","slug":"其他","permalink":"https://alisdon.github.com/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://alisdon.github.com/tags/其他/"}]},{"title":"hexo书写一篇文章","slug":"用hexo写一篇文章","date":"2018-07-27T16:12:50.110Z","updated":"2018-12-19T04:19:36.194Z","comments":true,"path":"其他/用hexo写一篇文章/","link":"","permalink":"https://alisdon.github.com/其他/用hexo写一篇文章/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate (hexo g) More info: Generating Deploy to remote sites1$ hexo deploy (hexo d) More info: Deployment","categories":[{"name":"其他","slug":"其他","permalink":"https://alisdon.github.com/categories/其他/"}],"tags":[{"name":"其他","slug":"其他","permalink":"https://alisdon.github.com/tags/其他/"}]},{"title":"linux下实现无密操作git","slug":"linux下实现无密操作git","date":"2018-07-24T08:44:46.000Z","updated":"2019-01-04T01:37:37.189Z","comments":true,"path":"服务端/linux下实现无密操作git/","link":"","permalink":"https://alisdon.github.com/服务端/linux下实现无密操作git/","excerpt":"","text":"linux服务端配置linux安装git yum install -y git 创建用户git groupadd git adduser git -g git 配置linux权限问题及创建authorized_keys文件 cd /home/git mkdir .ssh chmod 700 .ssh touch .ssh/authorized_keys chmod 600 .ssh/authorized_keys cd /home chown -R git:git git Tips:后续的git clone如果需要密码，很有可能是git用户没有访问authorized_keys文件的权限 创建git仓库文件夹 cd /home mkdir gitTest chown git:git gitTest //赋予git用户权限 初始化git仓库 cd gitTest git init --bare gitTest.git 把仓库所属用户改为git chown -R git:git gitTest.git 创建post-receive文件（若不使用git自启动属性可不操作） vim ~/gitTest.git/hooks/post-receive post-receive文件内容（若不使用git自启动属性可不操作） #！/bin/sh git --work-tree=/usr/share/nginx/html/blog --git-dir=/home/gitTest/gitTest.git checkout -f 设置权限（若不使用git自启动属性可不操作） chmod +x ~/gitTest.git/hooks/post-receive 创建客户端口令ssh-keygen -t rsa -C &apos;你的邮箱&apos; 设置免密登录口令将id_rsa.pub中的内容写到服务器的authorized_keys文件中。 cat id_rsa.pub &gt;&gt; authorized_keys 请求git仓库git clone git@ip:/home/gitTest/gitTest.git","categories":[{"name":"服务端","slug":"服务端","permalink":"https://alisdon.github.com/categories/服务端/"}],"tags":[{"name":"git","slug":"git","permalink":"https://alisdon.github.com/tags/git/"}]}]}